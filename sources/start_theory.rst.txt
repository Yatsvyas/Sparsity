Описание работы программы
================================

В этой программе мы будем определять степени свободы для ячеек. Использовать будем самый низкий порядок :math:`Q_1`, когда степени свободы связаны с вершинами ячеек.

Мы представляем решение в виде линейной комбинации :math:`u_h(\mathbf x) = \sum_{j=0}^{N-1} U_j \varphi_j(\mathbf x)`. Здесь :math:`U_j` - вектор коэффициентов разложений. Так как мы не знаем этих значений (мы получим их как решение линейной или нелинейной системы), они называются "неизвестными" или "степенями свободы". Это можно назвать первым значением термина "степени свободы".

Второе значение значение можно объяснить следующим образом. Мы ищем конечномерную функцию :math:`u_h \in V_h`, она удовлетворяет некоторому набору уравнений (например, :math:`a(u_h,\varphi_h)=(f,\varphi_h)` для всех тестовых функций :math:`\varphi_h\in V_h`). Другими словами, решение должно лежать в некотором пространстве :math:`V_h`. Однако, чтобы решить задачу на компьютере, мы должны выбрать базис для пространства. Это набор функций вида :math:`\varphi_j(\mathbf x)`, которые мы использовали в разложении :math:`u_h(\mathbf x)` с коэффициентами :math:`U_j`.​ Описание "степеней свободы" в этом контексте требует от нас простого перечисления базисных функций в пространстве :math:`V_h`. ​ Для :math:`Q_1` элементов это означает простое перечисление вершин сетки каким-либо образом. Другими словами, перечисление степеней свободы это совершенно отдельная вещь от индексов, которые мы используем для вершин. Класс, которые обеспечивает перечисление базисных функций :math:`V_h` ​называется **DoFHandler**.

**Разреженность матриц**

Рассмотрим один практический момент программы конечных элементов, а именно, что матрицы конечных элементов всегда очень разрежены: почти все элементы в этой матрице равны нулю.

Если более точнее, то мы говорим, что матрица разрежена, если число ненулевых записей в строке матрицы не зависит от общего числа степеней свободы.

Разреженность является одной из отличительных особенностей метода конечных элементов, по сравнению, скажем, с аппроксимацией решения дифференциального уравнения в частных производных с использованием разложения Тейлора и поиска коэффициентов или с использованием базиса Фурье.

С практической точки зрения именно разреженность матриц позволяет нам решать задачи с миллионами или миллиардами неизвестных.

**Как происходит нумерация степеней свободы**

По умолчанию класс DoFHandler перечисляет степени свободы довольно случайным образом; следовательно, шаблон разреженности также не оптимизирован для какой-либо конкретной цели. Чтобы показать это, приведенный ниже код продемонстрирует простой способ вывода "шаблона разреженности", который соответствует DoFHandler, то есть объекту, представляющему все потенциально ненулевые элементы матрицы, которые можно построить при дискретизации дифференциального уравнения в частных производных на сетке и ее DoFHandler. Это отсутствие структуры в модели разреженности будет очевидно из рисунков, которые мы получим в результате работы программы.

Для большинства приложений и алгоритмов точный способ нумерации степеней свободы не имеет значения. Однако, для некоторых алгоритмов это всё все важно. Поэтому deal.ii имеет алгоритмы, которые могут повторно перечислить степени свободы определенным образом в пространстве имен DoFRenumbering. Перенумерацию можно рассматривать как выбор другого, переставляемого базиса пространства конечных элементов. Шаблон разреженности и матрицы, которые возникают в результате этой перенумерации, также являются просто перестановкой строк и столбцов по сравнению с теми, которые мы получили бы без явной перенумерации. В приведенной ниже программе используется для этого алгоритм Катхилла — Макки. Рисунок после перенумерования мы также получим в результате работы программы